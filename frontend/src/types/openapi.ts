/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/auth/login": {
    /** Auth:Jwt.Login */
    post: operations["auth_jwt_login_auth_login_post"];
  };
  "/auth/logout": {
    /** Auth:Jwt.Logout */
    post: operations["auth_jwt_logout_auth_logout_post"];
  };
  "/auth/register": {
    /**
     * Register 
     * @description 注册时不能指定setting，使用默认setting
     */
    post: operations["register_auth_register_post"];
  };
  "/user": {
    /** Get All Users */
    get: operations["get_all_users_user_get"];
  };
  "/user/me": {
    /** Get Me */
    get: operations["get_me_user_me_get"];
    /** Update Me */
    patch: operations["update_me_user_me_patch"];
  };
  "/user/{user_id}": {
    /** Admin Get User */
    get: operations["admin_get_user_user__user_id__get"];
    /** Admin Delete User */
    delete: operations["admin_delete_user_user__user_id__delete"];
    /** Admin Update User */
    patch: operations["admin_update_user_user__user_id__patch"];
  };
  "/user/{user_id}/setting": {
    /** Admin Update User Setting */
    patch: operations["admin_update_user_setting_user__user_id__setting_patch"];
  };
  "/conv": {
    /**
     * Get All Conversations 
     * @description 返回自己的有效会话
     * 对于管理员，返回所有对话，并可以指定是否只返回有效会话
     */
    get: operations["get_all_conversations_conv_get"];
    /** Delete All Conversation */
    delete: operations["delete_all_conversation_conv_delete"];
  };
  "/conv/{conversation_id}": {
    /** Get Conversation History */
    get: operations["get_conversation_history_conv__conversation_id__get"];
    /**
     * Delete Conversation 
     * @description remove conversation from database and chatgpt server
     */
    delete: operations["delete_conversation_conv__conversation_id__delete"];
    /** Update Conversation Title */
    patch: operations["update_conversation_title_conv__conversation_id__patch"];
  };
  "/conv/{conversation_id}/vanish": {
    /** Vanish Conversation */
    delete: operations["vanish_conversation_conv__conversation_id__vanish_delete"];
  };
  "/conv/{conversation_id}/assign/{username}": {
    /** Assign Conversation */
    patch: operations["assign_conversation_conv__conversation_id__assign__username__patch"];
  };
  "/conv/{conversation_id}/gen_title": {
    /** Generate Conversation Title */
    patch: operations["generate_conversation_title_conv__conversation_id__gen_title_patch"];
  };
  "/chat/avaliable-models": {
    /** Get Avaliable Models */
    get: operations["get_avaliable_models_chat_avaliable_models_get"];
  };
  "/system/info": {
    /** Get System Info */
    get: operations["get_system_info_system_info_get"];
  };
  "/system/request_statistics": {
    /** Get Request Statistics */
    get: operations["get_request_statistics_system_request_statistics_get"];
  };
  "/system/server_logs": {
    /** Get Server Logs */
    post: operations["get_server_logs_system_server_logs_post"];
  };
  "/system/config": {
    /** Get Config */
    get: operations["get_config_system_config_get"];
    /** Update Config */
    patch: operations["update_config_system_config_patch"];
  };
  "/status": {
    /**
     * Get Server Status 
     * @description 普通用户获取服务器状态
     */
    get: operations["get_server_status_status_get"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * ApiChatModels 
     * @description An enumeration. 
     * @enum {unknown}
     */
    ApiChatModels: "gpt-3.5-turbo" | "gpt-4";
    /** Body_auth_jwt_login_auth_login_post */
    Body_auth_jwt_login_auth_login_post: {
      /** Grant Type */
      grant_type?: string;
      /** Username */
      username: string;
      /** Password */
      password: string;
      /**
       * Scope 
       * @default
       */
      scope?: string;
      /** Client Id */
      client_id?: string;
      /** Client Secret */
      client_secret?: string;
    };
    /** ChatGPTSetting */
    ChatGPTSetting: {
      /**
       * Is Plus Account 
       * @default false
       */
      is_plus_account?: boolean;
      /** Chatgpt Base Url */
      chatgpt_base_url?: string;
      /**
       * Ask Timeout 
       * @default 600
       */
      ask_timeout?: number;
    };
    /** ConfigRead */
    ConfigRead: {
      chatgpt: components["schemas"]["ChatGPTSetting"];
      /** Credentials Exist */
      credentials_exist: {
        [key: string]: boolean | undefined;
      };
    };
    /** ConfigUpdate */
    ConfigUpdate: {
      chatgpt: components["schemas"]["ChatGPTSetting"];
      credentials: components["schemas"]["Credentials"];
    };
    /** Credentials */
    Credentials: {
      /** Chatgpt Account Access Token */
      chatgpt_account_access_token?: string;
      /** Chatgpt Account Username */
      chatgpt_account_username?: string;
      /** Chatgpt Account Password */
      chatgpt_account_password?: string;
      /** Openai Api Key */
      openai_api_key?: string;
    };
    /** ErrorModel */
    ErrorModel: {
      /** Detail */
      detail: string | ({
        [key: string]: string | undefined;
      });
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: (components["schemas"]["ValidationError"])[];
    };
    /** LogFilterOptions */
    LogFilterOptions: {
      /**
       * Max Lines 
       * @default 100
       */
      max_lines?: number;
      /** Exclude Keywords */
      exclude_keywords?: (string)[];
    };
    /** RequestStatistics */
    RequestStatistics: {
      /** Request Counts Interval */
      request_counts_interval: number;
      /** Request Counts */
      request_counts: {
        [key: string]: (Record<string, never>)[] | undefined;
      };
      /** Ask Records */
      ask_records: (Record<string, never>)[];
    };
    /** RevChatAskLimits */
    RevChatAskLimits: {
      /** Max Conv Count */
      max_conv_count: number;
      /** Total Count */
      total_count: number;
      /** Per Model Count */
      per_model_count: {
        [key: string]: number | undefined;
      };
    };
    /**
     * RevChatModels 
     * @description An enumeration. 
     * @enum {unknown}
     */
    RevChatModels: "gpt-4" | "text-davinci-002-render-sha" | "text-davinci-002-render-paid";
    /**
     * RevChatStatus 
     * @description An enumeration. 
     * @enum {unknown}
     */
    RevChatStatus: "asking" | "queueing" | "idling";
    /** RevChatTimeLimits */
    RevChatTimeLimits: {
      /** Time Window Limits */
      time_window_limits: {
        [key: string]: ((number)[])[] | undefined;
      };
      /** Available Time Range In Day */
      available_time_range_in_day: {
        [key: string]: (number)[] | undefined;
      };
    };
    /** RevConversationSchema */
    RevConversationSchema: {
      /**
       * Id 
       * @default -1
       */
      id?: number;
      /**
       * Conversation Id 
       * Format: uuid
       */
      conversation_id?: string;
      /** Title */
      title?: string;
      /** User Id */
      user_id?: number;
      /**
       * Is Valid 
       * @default true
       */
      is_valid?: boolean;
      model_name?: components["schemas"]["RevChatModels"];
      /**
       * Created Time 
       * Format: date-time
       */
      created_time?: string;
      /**
       * Active Time 
       * Format: date-time
       */
      active_time?: string;
    };
    /** ServerStatusSchema */
    ServerStatusSchema: {
      /** Active User In 5M */
      active_user_in_5m?: number;
      /** Active User In 1H */
      active_user_in_1h?: number;
      /** Active User In 1D */
      active_user_in_1d?: number;
      /** Is Chatbot Busy */
      is_chatbot_busy?: boolean;
      /** Chatbot Waiting Count */
      chatbot_waiting_count?: number;
    };
    /** SystemInfo */
    SystemInfo: {
      /** Startup Time */
      startup_time: number;
      /** Total User Count */
      total_user_count: number;
      /** Total Conversation Count */
      total_conversation_count: number;
      /** Valid Conversation Count */
      valid_conversation_count: number;
    };
    /** UserCreate */
    UserCreate: {
      /**
       * Email 
       * Format: email
       */
      email: string;
      /** Password */
      password: string;
      /**
       * Is Active 
       * @default true
       */
      is_active?: boolean;
      /**
       * Is Superuser 
       * @default false
       */
      is_superuser?: boolean;
      /**
       * Is Verified 
       * @default false
       */
      is_verified?: boolean;
      /** Username */
      username: string;
      /** Nickname */
      nickname: string;
      /** Avatar */
      avatar?: string;
      /** Remark */
      remark?: string;
    };
    /**
     * UserRead 
     * @description Base User model.
     */
    UserRead: {
      /** Id */
      id: number;
      /**
       * Email 
       * Format: email
       */
      email: string;
      /** Is Active */
      is_active: boolean;
      /** Is Superuser */
      is_superuser: boolean;
      /** Is Verified */
      is_verified: boolean;
      /** Username */
      username: string;
      /** Nickname */
      nickname: string;
      rev_chat_status: components["schemas"]["RevChatStatus"];
      /**
       * Active Time 
       * Format: date-time
       */
      active_time?: string;
      /**
       * Created Time 
       * Format: date-time
       */
      created_time: string;
      /** Avatar */
      avatar?: string;
      setting: components["schemas"]["UserSettingSchema"];
    };
    /**
     * UserReadAdmin 
     * @description Base User model.
     */
    UserReadAdmin: {
      /** Id */
      id: number;
      /**
       * Email 
       * Format: email
       */
      email: string;
      /** Is Active */
      is_active: boolean;
      /** Is Superuser */
      is_superuser: boolean;
      /** Is Verified */
      is_verified: boolean;
      /** Username */
      username: string;
      /** Nickname */
      nickname: string;
      rev_chat_status: components["schemas"]["RevChatStatus"];
      /**
       * Active Time 
       * Format: date-time
       */
      active_time?: string;
      /**
       * Created Time 
       * Format: date-time
       */
      created_time: string;
      /** Avatar */
      avatar?: string;
      setting: components["schemas"]["UserSettingSchema"];
      /** Remark */
      remark?: string;
    };
    /** UserSettingSchema */
    UserSettingSchema: {
      /** Id */
      id?: number;
      /** User Id */
      user_id?: number;
      /** Can Use Revchatgpt */
      can_use_revchatgpt: boolean;
      revchatgpt_available_models: (components["schemas"]["RevChatModels"])[];
      revchatgpt_ask_limits: components["schemas"]["RevChatAskLimits"];
      revchatgpt_time_limits: components["schemas"]["RevChatTimeLimits"];
      /** Can Use Openai Api */
      can_use_openai_api: boolean;
      /** Openai Api Credits */
      openai_api_credits: number;
      openai_api_available_models: (components["schemas"]["ApiChatModels"])[];
      /** Can Use Custom Openai Api */
      can_use_custom_openai_api: boolean;
      /** Custom Openai Api Key */
      custom_openai_api_key?: string;
    };
    /** UserUpdate */
    UserUpdate: {
      /** Password */
      password?: string;
      /** Email */
      email?: string;
      /** Is Active */
      is_active?: boolean;
      /** Is Superuser */
      is_superuser?: boolean;
      /** Is Verified */
      is_verified?: boolean;
      /** Nickname */
      nickname?: string;
      /** Avatar */
      avatar?: string;
    };
    /** UserUpdateAdmin */
    UserUpdateAdmin: {
      /** Password */
      password?: string;
      /** Email */
      email?: string;
      /** Is Active */
      is_active?: boolean;
      /** Is Superuser */
      is_superuser?: boolean;
      /** Is Verified */
      is_verified?: boolean;
      /** Nickname */
      nickname?: string;
      /** Avatar */
      avatar?: string;
      /** Username */
      username?: string;
      /** Remark */
      remark?: string;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  auth_jwt_login_auth_login_post: {
    /** Auth:Jwt.Login */
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": components["schemas"]["Body_auth_jwt_login_auth_login_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  auth_jwt_logout_auth_logout_post: {
    /** Auth:Jwt.Logout */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Missing token or inactive user. */
      401: never;
    };
  };
  register_auth_register_post: {
    /**
     * Register 
     * @description 注册时不能指定setting，使用默认setting
     */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_all_users_user_get: {
    /** Get All Users */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  get_me_user_me_get: {
    /** Get Me */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  update_me_user_me_patch: {
    /** Update Me */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  admin_get_user_user__user_id__get: {
    /** Admin Get User */
    parameters: {
      path: {
        user_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  admin_delete_user_user__user_id__delete: {
    /** Admin Delete User */
    parameters: {
      path: {
        user_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  admin_update_user_user__user_id__patch: {
    /** Admin Update User */
    parameters: {
      path: {
        user_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserUpdateAdmin"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  admin_update_user_setting_user__user_id__setting_patch: {
    /** Admin Update User Setting */
    parameters: {
      path: {
        user_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserSettingSchema"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_all_conversations_conv_get: {
    /**
     * Get All Conversations 
     * @description 返回自己的有效会话
     * 对于管理员，返回所有对话，并可以指定是否只返回有效会话
     */
    parameters?: {
      query?: {
        fetch_all?: boolean;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  delete_all_conversation_conv_delete: {
    /** Delete All Conversation */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  get_conversation_history_conv__conversation_id__get: {
    /** Get Conversation History */
    parameters: {
      path: {
        conversation_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  delete_conversation_conv__conversation_id__delete: {
    /**
     * Delete Conversation 
     * @description remove conversation from database and chatgpt server
     */
    parameters: {
      path: {
        conversation_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  update_conversation_title_conv__conversation_id__patch: {
    /** Update Conversation Title */
    parameters: {
      query: {
        title: string;
      };
      path: {
        conversation_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  vanish_conversation_conv__conversation_id__vanish_delete: {
    /** Vanish Conversation */
    parameters: {
      path: {
        conversation_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  assign_conversation_conv__conversation_id__assign__username__patch: {
    /** Assign Conversation */
    parameters: {
      path: {
        username: string;
        conversation_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  generate_conversation_title_conv__conversation_id__gen_title_patch: {
    /** Generate Conversation Title */
    parameters: {
      query: {
        message_id: string;
      };
      path: {
        conversation_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_avaliable_models_chat_avaliable_models_get: {
    /** Get Avaliable Models */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  get_system_info_system_info_get: {
    /** Get System Info */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  get_request_statistics_system_request_statistics_get: {
    /** Get Request Statistics */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  get_server_logs_system_server_logs_post: {
    /** Get Server Logs */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["LogFilterOptions"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_config_system_config_get: {
    /** Get Config */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  update_config_system_config_patch: {
    /** Update Config */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConfigUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_server_status_status_get: {
    /**
     * Get Server Status 
     * @description 普通用户获取服务器状态
     */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
}
